"""
Django settings for tweetme2 project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR is where our manage.py exists
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'h%b(6-98+0^gqr+0a07ie!dh2d$^f3by^tplpu$bj57dac)uz!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1','localhost']

LOGIN_URL = '/login'        # so here is the we change the value because default value is accounts/login
MAX_TWEET_LENGTH = 240      # here we adding the max_tweet length
TWEET_ACTION_OPTIONS = ["like", "unlike", "retweet"]  # so here we adding the option in the list 

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',                  # --> cors headers for connection with react    
    'rest_framework',               # --> adding rest framework
    'tweets',                       # --> Including our tweet app
    'profiles',                     # --> Including our profile app
    'accounts',                     # --> Including our account app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',             # --> Adding to use ability of django corsheaders
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',               
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tweetme2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],  # so here we add templates on our BASE_DIR
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tweetme2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [                                       # here we provide one more base dir 
    os.path.join(BASE_DIR, "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "static-root")  # when we run the collectstatic then all the data will be placed in the static-root folder

#CORS_ORIGIN_ALLOW_ALL = True    # all website are allow to make connection using the given regex
#CORS_URLS_REGEX = r'^/api/.*$'  # using /api/ we are able to fetch any url



DEFAULT_RENDERER_CLASSES = [
    'rest_framework.renderers.JSONRenderer',  # this will help to remove the rest design from the api
]

DEFAULT_AUTHENTICATION_CLASSES = [            # this is default authentication              
    'rest_framework.authentication.SessionAuthentication'
]

# so if we are in debug mode means debug set to true then we will render rest for checking
# otherwise we will only showing the json
if DEBUG:
    DEFAULT_RENDERER_CLASSES += [
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]
#    DEFAULT_AUTHENTICATION_CLASSES += [                 # here if we are in debug mode we also add our authetiation that if not user then it will take automatically random user
 #       'tweetme2.rest_api.dev.DevAuthentication'
  #  ]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': DEFAULT_AUTHENTICATION_CLASSES,
    'DEFAULT_RENDERER_CLASSES': DEFAULT_RENDERER_CLASSES  # so here we adding what classes we want to render which we write above

}

# here we allow the url which are able to fetch our api
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
]
